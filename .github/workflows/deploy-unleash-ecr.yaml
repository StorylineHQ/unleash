name: Deploy Unleash to ECR
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - development
          - staging
          - production

env:
  AWS_ACCOUNT_ID: 699214391223
  AWS_REGION: us-east-1

jobs:
  deploy-unleash:
    name: Build and Deploy Unleash
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials - Development
        if: inputs.environment == 'development'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DEV_DEPLOY_GITHUB_OIDC_IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure AWS credentials - Staging
        if: inputs.environment == 'staging'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.STG_DEPLOY_GITHUB_OIDC_IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure AWS credentials - Production
        if: inputs.environment == 'production'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.PROD_DEPLOY_GITHUB_OIDC_IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Database Credentials from AWS Secrets Manager
        id: db-secrets
        run: |
          # Determine environment prefix
          if [ "${{ inputs.environment }}" == "development" ]; then
            ENV_PREFIX="dev"
            UNLEASH_URL="https://unleash.dev.storyline.com/"
          elif [ "${{ inputs.environment }}" == "staging" ]; then
            ENV_PREFIX="stg"
            UNLEASH_URL="https://unleash.stg.storyline.com/"
          else
            ENV_PREFIX="prod"
            UNLEASH_URL="https://unleash.storyline.com/"
          fi
          
          echo "ENV_PREFIX=$ENV_PREFIX" >> $GITHUB_ENV
          echo "UNLEASH_URL=$UNLEASH_URL" >> $GITHUB_ENV
          
          # Get main database credentials
          DB_SECRET_NAME="stry-${ENV_PREFIX}-db-credentials"
          DB_SECRET=$(aws secretsmanager get-secret-value --secret-id $DB_SECRET_NAME --query SecretString --output text)
          
          # Extract database host
          DB_HOST=$(echo $DB_SECRET | jq -r '.host // .endpoint // .address')
          echo "DATABASE_HOST=$DB_HOST" >> $GITHUB_ENV
          
          # Get Unleash specific credentials if they exist, otherwise use main DB creds
          UNLEASH_SECRET_NAME="stry-${ENV_PREFIX}-unleash-db-credentials"
          if aws secretsmanager describe-secret --secret-id $UNLEASH_SECRET_NAME 2>/dev/null; then
            UNLEASH_SECRET=$(aws secretsmanager get-secret-value --secret-id $UNLEASH_SECRET_NAME --query SecretString --output text)
            echo "DATABASE_USERNAME=$(echo $UNLEASH_SECRET | jq -r '.username')" >> $GITHUB_ENV
            echo "::add-mask::$(echo $UNLEASH_SECRET | jq -r '.password')"
            echo "DATABASE_PASSWORD=$(echo $UNLEASH_SECRET | jq -r '.password')" >> $GITHUB_ENV
          else
            # Use main DB credentials
            echo "DATABASE_USERNAME=$(echo $DB_SECRET | jq -r '.username')" >> $GITHUB_ENV
            echo "::add-mask::$(echo $DB_SECRET | jq -r '.password')"
            echo "DATABASE_PASSWORD=$(echo $DB_SECRET | jq -r '.password')" >> $GITHUB_ENV
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build base Unleash image
        run: |
          # Build the base Unleash image using the existing Dockerfile
          docker build \
            --platform linux/amd64 \
            -t unleash-base:latest \
            .
          
          echo "Base Unleash image built successfully"

      - name: Create Storyline specific Dockerfile layer
        run: |
          # Create a Dockerfile that extends the base image with Storyline configuration
          cat > Dockerfile.storyline << 'EOF'
          FROM unleash-base:latest
          
          # Switch to root to modify the container
          USER root
          
          # Build arguments for database configuration
          ARG DATABASE_HOST
          ARG DATABASE_USERNAME
          ARG DATABASE_PASSWORD
          ARG UNLEASH_URL
          
          # Set environment variables for Unleash configuration
          ENV DATABASE_HOST=${DATABASE_HOST}
          ENV DATABASE_NAME=unleash
          ENV DATABASE_USERNAME=${DATABASE_USERNAME}
          ENV DATABASE_PASSWORD=${DATABASE_PASSWORD}
          ENV DATABASE_URL=postgres://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@${DATABASE_HOST}:5432/unleash
          ENV UNLEASH_URL=${UNLEASH_URL}
          ENV PORT=8000
          ENV HTTP_PORT=8000
          ENV LOG_LEVEL=info
          ENV DATABASE_SSL=false
          
          # Create a wrapper script to handle port redirection
          RUN echo '#!/bin/sh' > /entrypoint.sh && \
              echo 'export PORT=8000' >> /entrypoint.sh && \
              echo 'export HTTP_PORT=8000' >> /entrypoint.sh && \
              echo 'exec node dist/server.js' >> /entrypoint.sh && \
              chmod +x /entrypoint.sh
          
          # Replace the default 4242
          EXPOSE 8000
          
          # Switch back to node user
          USER node
          
          # Use our custom entrypoint
          ENTRYPOINT ["/entrypoint.sh"]
          EOF

      - name: Build and push Storyline configured Docker image
        run: |
          # Set ECR repository name based on environment
          if [ "${{ inputs.environment }}" == "development" ]; then
            ECR_REPOSITORY="stry-unleash-dev"
          elif [ "${{ inputs.environment }}" == "staging" ]; then
            ECR_REPOSITORY="stry-unleash-stg"
          else
            ECR_REPOSITORY="stry-unleash-prod"
          fi
          
          ECR_REGISTRY="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
          IMAGE_TAG="latest"
          
          # Build the custom Docker image
          docker build \
            --platform linux/amd64 \
            --build-arg DATABASE_HOST="${DATABASE_HOST}" \
            --build-arg DATABASE_USERNAME="${DATABASE_USERNAME}" \
            --build-arg DATABASE_PASSWORD="${DATABASE_PASSWORD}" \
            --build-arg UNLEASH_URL="${UNLEASH_URL}" \
            -f Dockerfile.storyline \
            -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} \
            -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${GITHUB_SHA} \
            .
          
          # Push both tags
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${GITHUB_SHA}
          
          echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_ENV
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV

      - name: Verify Deployment
        run: |
          echo "Deployment completed successfully!"
          echo "Image pushed to: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${GITHUB_SHA}"
          echo "Unleash URL: ${UNLEASH_URL}"