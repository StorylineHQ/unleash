name: Test Local Build
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  test-build:
    name: Test Docker Build Locally
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          # Mock environment variables for local testing
          echo "DATABASE_HOST=localhost" >> $GITHUB_ENV
          echo "DATABASE_USERNAME=unleash_user" >> $GITHUB_ENV
          echo "DATABASE_PASSWORD=test_password" >> $GITHUB_ENV
          echo "UNLEASH_URL=https://unleash.dev.storyline.com/" >> $GITHUB_ENV
          echo "ECR_REGISTRY=699214391223.dkr.ecr.us-east-1.amazonaws.com" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=stry-unleash-dev" >> $GITHUB_ENV

      - name: Build base Unleash image
        run: |
          # Build the base Unleash image using the existing Dockerfile
          docker build \
            --platform linux/amd64 \
            -t unleash-base:latest \
            .
          
          echo "Base Unleash image built successfully"

      - name: Create Storyline specific Dockerfile layer
        run: |
          # Create a Dockerfile that extends the base image with Storyline configuration
          cat > Dockerfile.storyline << 'EOF'
          FROM unleash-base:latest
          
          # Switch to root to modify the container
          USER root
          
          # Build arguments for database configuration
          ARG DATABASE_HOST
          ARG DATABASE_USERNAME
          ARG DATABASE_PASSWORD
          ARG UNLEASH_URL
          
          # Set environment variables for Unleash configuration
          ENV DATABASE_HOST=${DATABASE_HOST}
          ENV DATABASE_NAME=unleash
          ENV DATABASE_USERNAME=${DATABASE_USERNAME}
          ENV DATABASE_PASSWORD=${DATABASE_PASSWORD}
          ENV DATABASE_URL=postgres://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@${DATABASE_HOST}:5432/unleash
          ENV UNLEASH_URL=${UNLEASH_URL}
          ENV PORT=8000
          ENV HTTP_PORT=8000
          ENV LOG_LEVEL=info
          ENV DATABASE_SSL=false
          
          # Create a wrapper script to handle port redirection
          RUN echo '#!/bin/sh' > /entrypoint.sh && \
              echo 'export PORT=8000' >> /entrypoint.sh && \
              echo 'export HTTP_PORT=8000' >> /entrypoint.sh && \
              echo 'exec node dist/server.js' >> /entrypoint.sh && \
              chmod +x /entrypoint.sh
          
          # Replace the default 4242
          EXPOSE 8000
          
          # Switch back to node user
          USER node
          
          # Use our custom entrypoint
          ENTRYPOINT ["/entrypoint.sh"]
          EOF

      - name: Build Storyline configured Docker image
        run: |
          # Build the custom Docker image
          docker build \
            --platform linux/amd64 \
            --build-arg DATABASE_HOST="${DATABASE_HOST}" \
            --build-arg DATABASE_USERNAME="${DATABASE_USERNAME}" \
            --build-arg DATABASE_PASSWORD="${DATABASE_PASSWORD}" \
            --build-arg UNLEASH_URL="${UNLEASH_URL}" \
            -f Dockerfile.storyline \
            -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:test \
            .
          
          echo "Successfully built: ${ECR_REGISTRY}/${ECR_REPOSITORY}:test"
          
          # List the images
          docker images | grep unleash